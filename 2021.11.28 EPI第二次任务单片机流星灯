#include <reg52.h>
#include "intrins.h"
 
typedef unsigned char u8;
typedef unsigned int u16;

sbit LED1=P2^0;
sbit LED2=P2^1;
sbit LED3=P2^2;
sbit LED4=P2^3;
sbit LED5=P2^4;
sbit LED6=P2^5;
sbit LED7=P2^6;
sbit LED8=P2^7;

sbit KEY1=P3^1;
sbit KEY2=P3^0;
sbit KEY3=P3^2;
sbit KEY4=P3^3;

#define KEY1_PRESS	1
#define KEY2_PRESS	2
#define KEY3_PRESS	3
#define KEY4_PRESS	4
#define KEY_UNPRESS	0

u16 count;
u16 t;
u8 len=5;
u8 num;
u8 key=1;
u8 state=1;
u8 i=0;
u8 a=0;
u8 b=1;
u8 c=2;
u8 d=3;
u8 e=4;
u8 f=5;
u8 g=6;
u8 h=7;
u16 j=2000;
u8 flag;
u8 flag1=2;
u16 tt=0;

u8 DUTY_PWM_3[3]={100,66,33};
u8 DUTY_PWM_4[4]={100,75,50,25};
u8 DUTY_PWM_5[5]={100,80,60,40,20};
u8 DUTY_PWM_6[6]={100,83,67,50,33,17};
u8 DUTY_PWM_7[7]={100,86,71,57,43,28,14};
u8 DUTY_PWM_8[8]={100,88,75,63,50,38,25,13};

void time0_init(void)
{
  TMOD|=0X01;//低四位控制定时器0模式，gate 、C\T、m1、m0工作方式01
	ET0=1;//定时器0中断允许
	EA=1;
	TR0=1;//定时器0打开
}

void time0() interrupt 1
{
	TH0=0xFF;
	TL0=0xA4;//0.1ms
	count++;
	t++;
	if(count==100)//10ms
	{
		count=0;
	  tt++;
	}
	if(flag1==0&&tt==40)
	{
	  flag=1;
		tt=0;
	}
	if(flag1==1&&tt==10)
	{
	  flag=1;
		tt=0;
	}
	if(flag1==2&&tt==5)
	{
	  flag=1;
		tt=0;
	}
	if(flag1==3&&tt==2)
	{
	  flag=1;
		tt=0;
	}
	if(flag1==4)
	{
	  flag=1;
		tt=0;
	}
	if(t==j)
	{
		t=0;
		a++;
		b++;
		c++;
		if(len>3)
		{
			d++;
			if(len>4)
			{
				e++;
				if(len>5)
				{
					f++;
					if(len>6)
					{
					  g++;
						if(len>7)
					   h++;
					}
				}
			}
		}
  if(len==5)	
	{
		if(a==5)
			a=0;
		if(b==5)
			b=0;
		if(c==5)
			c=0;
		if(d==5)
			d=0;
		if(e==5)
			e=0;
		if(f==5)
			f=0;
		if(g==5)
			g=0;
		if(h==5)
			h=0;
	}
	 if(len==4)	
	{
		if(a==4)
			a=0;
		if(b==4)
			b=0;
		if(c==4)
			c=0;
		if(d==4)
			d=0;
		if(e==4)
			e=0;
		if(f==4)
			f=0;
		if(g==4)
			g=0;
		if(h==4)
			h=0;
	}
	if(len==3)	
	{
		if(a==3)
			a=0;
		if(b==3)
			b=0;
		if(c==3)
			c=0;
		if(d==3)
			d=0;
		if(e==3)
			e=0;
		if(f==3)
			f=0;
		if(g==3)
			g=0;
		if(h==3)
			h=0;
	}
	if(len==6)	
	{
		if(a==6)
			a=0;
		if(b==6)
			b=0;
		if(c==6)
			c=0;
		if(d==6)
			d=0;
		if(e==6)
			e=0;
		if(f==6)
			f=0;
		if(g==6)
			g=0;
		if(h==6)
			h=0;
	}
	if(len==7)	
	{
		if(a==7)
			a=0;
		if(b==7)
			b=0;
		if(c==7)
			c=0;
		if(d==7)
			d=0;
		if(e==7)
			e=0;
		if(f==7)
			f=0;
		if(g==7)
			g=0;
		if(h==7)
			h=0;
	}
	if(len==8)	
	{
		if(a==8)
			a=0;
		if(b==8)
			b=0;
		if(c==8)
			c=0;
		if(d==8)
			d=0;
		if(e==8)
			e=0;
		if(f==8)
			f=0;
		if(g==8)
			g=0;
		if(h==8)
			h=0;
	}
 
	}
	if(len==5)
	{
		if(count<DUTY_PWM_5[a])
			LED1=0;
		else
			LED1=1;
    if(count<DUTY_PWM_5[b])
		  LED2=0;
	  else
		  LED2=1;
		if(count<DUTY_PWM_5[c])
		  LED3=0;
	  else
		  LED3=1;
		if(count<DUTY_PWM_5[d])
			LED4=0;
		else
			LED4=1;
		if(count<DUTY_PWM_5[e])
			LED5=0;
		else
			LED5=1;
	  if(count<DUTY_PWM_5[a])
			LED6=0;
		else
			LED6=1;
		if(count<DUTY_PWM_5[b])
			LED7=0;
		else
			LED7=1;
		if(count<DUTY_PWM_5[c])
			LED8=0;
		else
			LED8=1;
	}
	if(len==4)
	{
		if(count<DUTY_PWM_4[a])
			LED1=0;
		else
			LED1=1;
    if(count<DUTY_PWM_4[b])
		  LED2=0;
	  else
		  LED2=1;
		if(count<DUTY_PWM_4[c])
		  LED3=0;
	  else
		  LED3=1;
		if(count<DUTY_PWM_4[d])
			LED4=0;
		else
			LED4=1;
		if(count<DUTY_PWM_4[a])
			LED5=0;
		else
			LED5=1;
	  if(count<DUTY_PWM_4[b])
			LED6=0;
		else
			LED6=1;
		if(count<DUTY_PWM_4[c])
			LED7=0;
		else
			LED7=1;
		if(count<DUTY_PWM_4[d])
			LED8=0;
		else
			LED8=1;
	}
	if(len==3)
	{
		if(count<DUTY_PWM_3[a])
			LED1=0;
		else
			LED1=1;
    if(count<DUTY_PWM_3[b])
		  LED2=0;
	  else
		  LED2=1;
		if(count<DUTY_PWM_3[c])
		  LED3=0;
	  else
		  LED3=1;
		if(count<DUTY_PWM_3[a])
			LED4=0;
		else
			LED4=1;
		if(count<DUTY_PWM_3[b])
			LED5=0;
		else
			LED5=1;
	  if(count<DUTY_PWM_3[c])
			LED6=0;
		else
			LED6=1;
		if(count<DUTY_PWM_3[a])
			LED7=0;
		else
			LED7=1;
		if(count<DUTY_PWM_3[b])
			LED8=0;
		else
			LED8=1;
	}
	if(len==6)
	{
		if(count<DUTY_PWM_6[a])
			LED1=0;
		else
			LED1=1;
    if(count<DUTY_PWM_6[b])
		  LED2=0;
	  else
		  LED2=1;
		if(count<DUTY_PWM_6[c])
		  LED3=0;
	  else
		  LED3=1;
		if(count<DUTY_PWM_6[d])
			LED4=0;
		else
			LED4=1;
		if(count<DUTY_PWM_6[e])
			LED5=0;
		else
			LED5=1;
	  if(count<DUTY_PWM_6[f])
			LED6=0;
		else
			LED6=1;
		if(count<DUTY_PWM_6[a])
			LED7=0;
		else
			LED7=1;
		if(count<DUTY_PWM_6[b])
			LED8=0;
		else
			LED8=1;
	}
	if(len==7)
	{
		if(count<DUTY_PWM_7[a])
			LED1=0;
		else
			LED1=1;
    if(count<DUTY_PWM_7[b])
		  LED2=0;
	  else
		  LED2=1;
		if(count<DUTY_PWM_7[c])
		  LED3=0;
	  else
		  LED3=1;
		if(count<DUTY_PWM_7[d])
			LED4=0;
		else
			LED4=1;
		if(count<DUTY_PWM_7[e])
			LED5=0;
		else
			LED5=1;
	  if(count<DUTY_PWM_7[f])
			LED6=0;
		else
			LED6=1;
		if(count<DUTY_PWM_7[g])
			LED7=0;
		else
			LED7=1;
		if(count<DUTY_PWM_7[a])
			LED8=0;
		else
			LED8=1;
	}
	if(len==8)
	{
		if(count<DUTY_PWM_8[a])
			LED1=0;
		else
			LED1=1;
    if(count<DUTY_PWM_8[b])
		  LED2=0;
	  else
		  LED2=1;
		if(count<DUTY_PWM_8[c])
		  LED3=0;
	  else
		  LED3=1;
		if(count<DUTY_PWM_8[d])
			LED4=0;
		else
			LED4=1;
		if(count<DUTY_PWM_8[e])
			LED5=0;
		else
			LED5=1;
	  if(count<DUTY_PWM_8[f])
			LED6=0;
		else
			LED6=1;
		if(count<DUTY_PWM_8[g])
			LED7=0;
		else
			LED7=1;
		if(count<DUTY_PWM_8[h])
			LED8=0;
		else
			LED8=1;
	}
	
}

void delay(u16 ten_us)
{
   while(ten_us--);
}

u8 key_scan()
{
	if(key==1&&(KEY1==0||KEY2==0||KEY3==0||KEY4==0))
	{
	   delay(250);
		 key=0;
		if   (KEY1==0)
			   return KEY1_PRESS;
		else if(KEY2==0)
			   return KEY2_PRESS;
		else if(KEY3==0)
			   return KEY3_PRESS;
		else if(KEY4==0)
			   return KEY4_PRESS;
					 
	}
	else if(KEY1==1&&KEY2==1&&KEY3==1&&KEY4==1)
	{	
	  key=1;
	}	
	return KEY_UNPRESS;
}

void main()
{
  time0_init();
	while(1)
	 {    
     num = key_scan();
		 switch(state)
		 {
		   case 1:
					 {
						 if(num==4)
						 {
						   len=5;
								a=0;
								b=1;
								c=2;
								d=3;
								e=4;
						 }
						 if(num==2)
							 {
								 if(len<8)	
								 {				 
									len++;
									a=0;b=1;c=2;d=3;e=4;f=5;g=6;h=7;
								 }
							 }
						 if(num==3)
							 {
								 if(len>3)				
								 {
									 len--;
									 a=0;b=1;c=2;d=3;e=4;f=5;g=6;h=7;
								 }
							 }
							if(num==1)
							{
								state=2;
								len=5;
								a=0;
								b=1;
								c=2;
								d=3;
								e=4;
							}
							break;
					 }
			 case 2:
					 {
								 if(num==4)
							{
								
								len=5;
								a=0;
								b=1;
								c=2;
								d=3;
								e=4;
								DUTY_PWM_5[0]=100;
								DUTY_PWM_5[1]=80;
								DUTY_PWM_5[2]=60;
								DUTY_PWM_5[3]=40;
								DUTY_PWM_5[4]=20;
							}
						     if(len==5)
								 {
										 if(num==2)
										 {
											if(DUTY_PWM_5[0]<100)
											 {
												 DUTY_PWM_5[0]+=10;
												 DUTY_PWM_5[1]+=8;
												 DUTY_PWM_5[2]+=6;
												 DUTY_PWM_5[3]+=4;
												 DUTY_PWM_5[4]+=2;
											 }
										 }
										 if(num==3)
										 {
											 if(DUTY_PWM_5[0]>30)
											 {
												 DUTY_PWM_5[0]-=10;
												 DUTY_PWM_5[1]-=8;
												 DUTY_PWM_5[2]-=6;
												 DUTY_PWM_5[3]-=4;
												 DUTY_PWM_5[4]-=2;
											 }
										 }
								 }
								if(num==1)
							{
								state=3;
								len=5;
								a=0;
								b=1;
								c=2;
								d=3;
								e=4;
								DUTY_PWM_5[0]=100;
								DUTY_PWM_5[1]=80;
								DUTY_PWM_5[2]=60;
								DUTY_PWM_5[3]=40;
								DUTY_PWM_5[4]=20;
							}
									break;
					 }
			 case 3:
					 {
						 if(num==4)
							{
								
								len=5;
								a=0;
								b=1;
								c=2;
								d=3;
								e=4;
								j=2500;
							}
							 if(num==2)
							 {
								if(j>1250)
								 {
									 j/=2;
								 }
							 }
							 if(num==3)
							 {
								 if(j<20000)
								 {
									 j*=2;
								 }
							 }
							 if(num==1)
							{
								state=4;
								len=5;
								a=0;
								b=1;
								c=2;
								d=3;
								e=4;
								j=2000;
							}
										break;
					 }
			 case 4:
			 {
				 
						 if(num==2)
							 if(flag1<4)
							    flag1++;
						 if(num==3)
							 if(flag1>0)
							    flag1--;
								for(i=0;i<10;i++)
							 {
								 DUTY_PWM_5[0]-=10;
								 DUTY_PWM_5[1]-=8;
								 DUTY_PWM_5[2]-=6;
								 DUTY_PWM_5[3]-=4;
								 DUTY_PWM_5[4]-=2;
								 flag=0;
								 tt=0;
								 while(1)
								{
									 if(flag==1)
											break;
								}
							 }
							 for(i=0;i<10;i++)
							 {
								 DUTY_PWM_5[0]+=10;
								 DUTY_PWM_5[1]+=8;
								 DUTY_PWM_5[2]+=6;
								 DUTY_PWM_5[3]+=4;
								 DUTY_PWM_5[4]+=2;
								 flag=0;
								 tt=0;
								 while(1)
								{
									 if(flag==1)
											break;
								}
							 }
							 
							 if(num==1)
											{
												state=1;
												len=5;
												a=0;
												b=1;
												c=2;
												d=3;
												e=4;
											  flag1=0;
											}
							if(num==4)
											{
												len=5;
												a=0;
												b=1;
												c=2;
												d=3;
												e=4;
												flag1=2;
											}
											break;
		    }
			 
	   }
	
		 
	 }
} 
